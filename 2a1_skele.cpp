#include <cmath>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
using namespace std;
int main(int argc, char *argv[])
{
	FILE *file;
	int BytesPerPixel;
	int height;
	int width;
	if (argc < 4){
		cout << "Errrr" << endl;
		cout << "Errrr" << endl;
		return 0;
	}
	if (argc < 3){
		BytesPerPixel = 1;
	} 
	else {
		BytesPerPixel = atoi(argv[3]);
		if (argc >= 3){
			height = atoi(argv[4]);
			width = atoi(argv[5]);
		}
	}
	unsigned char Imagedata[height][width][BytesPerPixel];
    if (!(file=fopen(argv[1],"rb"))) {
		cout << "Cannot open file: " << argv[1] <<endl;
		exit(1);
	}
	fread(Imagedata, sizeof(unsigned char), height*width*BytesPerPixel, file);
	fclose(file);
	////hi//
	long int c_mask[58] = {1000000,10000,100,1,10000000,100000,1000,10,11000000,1100000,110000,11000,1100,110,11,10000001,11000001,1110000,11100,111,10110000,10100001,1101000,11000010,11100000,111000,1110,10000011,10110001,1101100,11110000,11100001,1111000,111100,11110,1111,10000111,11000011,11110001,1111100,11111,11000111,11100011,11111000,111110,10001111,11110011,11100111,11111100,11111001,1111110,111111,10011111,11001111,11110111,11111101,1111111,11011111};	
	long int uc_mask[364] = {1000000,10000,10,10000000,11000000,1100000,110000,11000,1100,110,11,10000001,1101000,10110000,10100001,11000010,11000100,1100100,11100100,110001,11001,111001,1000110,1001100,1001110,10010001,10011,10010011,111000,111001,10111000,10111001,1111000,1111001,11111000,11111001,111010,111011,10111010,10111011,1111010,1111011,11111010,11111011,111100,111101,10111100,10111101,1111100,1111101,11111100,11111101,111110,111111,10111110,10111111,1111110,1111111,11111110,11111111,101010,1101010,111010,1111010,101010,101011,101110,101111,10100010,10100011,10100110,10100111,10100010,11100010,10110010,11110010,10101000,10101100,10111000,10111100,10101000,10101001,11101000,11101001,10001010,10001011,11001010,11001011,10001010,10001110,10011010,10011110,10101,10010100,10010101,1010100,1010101,11010100,11010101,10111,10010110,10010111,1010110,1010111,11010110,11010111,110101,10110100,10110101,1110100,1110101,11110100,11110101,110111,10110110,10110111,1110110,1110111,11110110,11110111,11101,10011100,10011101,1011100,1011101,11011100,11011101,11111,10011110,10011111,1011110,1011111,11011110,11011111,111101,10111100,10111101,1111100,1111101,11111100,11111101,111111,10111110,10111111,1111110,1111111,11111110,11111111,1010100,1010010,1010110,1010001,1010101,1010011,1010111,11010100,11010010,11010110,11010001,11010101,11010011,11010111,1110100,1110010,1110110,1110001,1110101,1110011,1110111,11110100,11110010,11110110,11110001,11110101,11110011,11110111,1011100,1011010,1011110,1011001,1011101,1011011,1011111,11011100,11011010,11011110,11011001,11011101,11011011,11011111,1111100,1111010,1111110,1111001,1111101,1111011,1111111,11111100,11111010,11111110,11111001,11111101,11111011,11111111,1000101,1001001,1001101,1010001,1010101,1011001,1011101,11000101,11001001,11001101,11010001,11010101,11011001,11011101,1000111,1001011,1001111,1010011,1010111,1011011,1011111,11000111,11001011,11001111,11010011,11010111,11011011,11011111,1100101,1101001,1101101,1110001,1110101,1111001,1111101,11100101,11101001,11101101,11110001,11110101,11111001,11111101,1100111,1101011,1101111,1110011,1110111,1111011,1111111,11100111,11101011,11101111,11110011,11110111,11111011,11111111,1000101,100101,1100101,10101,1010101,110101,1110101,11000101,10100101,11100101,10010101,11010101,10110101,11110101,1000111,100111,1100111,10111,1010111,110111,1110111,11000111,10100111,11100111,10010111,11010111,10110111,11110111,1001101,101101,1101101,11101,1011101,111101,1111101,11001101,10101101,11101101,10011101,11011101,10111101,11111101,1001111,101111,1101111,11111,1011111,111111,1111111,11001111,10101111,11101111,10011111,11011111,10111111,11111111,1001010,1001011,1011010,1011011,101001,1101001,101101,1101101,10100100,10100101,10110100,10110101,10010010,11010010,10010110,11010110,111000,111001,10111000,10111001,1111000,1111001,11111000,11111001,111010,111011,10111010,10111011,1111010,1111011,11111010,11111011,111100,111101,10111100,10111101,1111100,1111101,11111100,11111101,111110,111111,10111110,10111111,1111110,1111111,11111110,11111111};
	int Imagedata_N_mask[height][width][1] ;
	int i,j,k;
    int check = 1,count = 0;
    int Imagedata_M_mask[height][width][1] ;
	unsigned char Imagedata_output[height][width][1];
	for(i=0;i<height; i++)
    {
		for(j=0;j<width; j++)
			Imagedata_N_mask[i][j][0]=(int)Imagedata[i][j][0]/255;
	}	
	while(check==1){
		check = 0;
		count = count + 1;
		for(i=1;i<height-1;i++)
        {
			for(j=1;j<width-1;j++)
            {
				Imagedata_M_mask[i][j][0]=0;
				int c = 1000000*Imagedata_N_mask[i-1][j+1][0] + 10000000*Imagedata_N_mask[i][j+1][0] +10000*Imagedata_N_mask[i-1][j-1][0] + 100000*Imagedata_N_mask[i-1][j][0]+100*Imagedata_N_mask[i+1][j-1][0] + 10*Imagedata_N_mask[i+1][j][0] + 1000*Imagedata_N_mask[i][j-1][0] + Imagedata_N_mask[i+1][j+1][0];
				for(k=0;k<58;k++)
                {
					Imagedata_M_mask[i][j][0] = (c^c_mask[k])&&!Imagedata_M_mask[i][j][0];
					if(Imagedata_M_mask[i][j][0]){
						break;
					}
				}
			}
		}
		for(i=1;i<height-1;i++){
			for(j=1;j<width-1;j++)
            {
				int c = 1000000*Imagedata_M_mask[i-1][j+1][0] +10000000*Imagedata_M_mask[i][j+1][0] +  10000*Imagedata_M_mask[i-1][j-1][0] + 100000*Imagedata_M_mask[i-1][j][0] + 10*Imagedata_M_mask[i+1][j][0]+ Imagedata_M_mask[i+1][j+1][0]+ 1000*Imagedata_M_mask[i][j-1][0]+ 100*Imagedata_M_mask[i+1][j-1][0]  ;
				for(k=0;k<364;k++)
                {
					if(!(c^uc_mask[k]))
						break;
				}
				if(k==364)
                {
					int c = Imagedata_N_mask[i][j][0];
					Imagedata_M_mask[i][j][0] = (!Imagedata_M_mask[i][j][0])&&Imagedata_N_mask[i][j][0];
					if (c!= Imagedata_N_mask[i][j][0])
						check=1;	
				}
			}
		}
	}	
	for(i=0;i<height;i++)
    {
		for(j=0;j<width;j++)
        {
            int v7 = Imagedata_N_mask[i+1][j+1][0];
            int v6 = Imagedata_N_mask[i+1][j][0];
            int v5 = Imagedata_N_mask[i+1][j-1][0];
            int v4 = Imagedata_N_mask[i][j-1][0];
            int v3 = Imagedata_N_mask[i-1][j-1][0];
            int v2 = Imagedata_N_mask[i-1][j][0];
            int v1 = Imagedata_N_mask[i-1][j+1][0];
            int v0 = Imagedata_N_mask[i][j+1][0];
			int v  = Imagedata_N_mask[i][j][0];

			int x1 = !v7&&!v6&&!v5&&!v4&&!v3&&!v2&&!v1&&!v0&&!v;
			int x2 = !v7&&!v6&&!v5&&!v4&&!v3&&!v2&&!v1&&!v0&&!v;
			int x3 = v7&&!v6&&v5&&!v4&&!v3&&!v2&&!v1&&!v0&&!v;
			int x4 = v7&&!v6&&!v5&&!v4&&!v3&&!v2&&v1&&!v0&&!v;
			int xy = x4||x3||x2||x1;
			int y1 = !xy&&!(v7||v1||v0)&&(v5||v4||v3)&&!v6&&!v2;
			int y2 = !xy&&!(v7||v6||v6)&&(v5||v4||v3)&&!v0&&!v4!;
			int y3 = (v4||v3||v2)&&v7&&!v6&&!v0;
			int y4 = (v6||v5||v4)&&v1&&!v2&&!v0;
			int y5 = (v7||v6||v0)&&v3&&!v4&&!v2;
			int y6 = (v2||v1||v0)&&v5&&!v6&&!v4 
			Imagedata_N_mask[i][j][0] = (xy||y1||y2||y3||y4||y5||y6);

		}
	}

	for(i=0;i<height;i++)
    {
		for(j=0;j<width;j++)
			Imagedata_output[i][j][0] = Imagedata_N_mask[i][j][0]*255;
	}
//bye bye//
	if (!(file=fopen(argv[2],"wb"))) {
		cout << "Cannot open file: " << argv[5] << endl;
		exit(1);
	}
	fwrite(Imagedata_output, sizeof(unsigned char), height*width*BytesPerPixel, file);
	fclose(file);

	return 0;
}